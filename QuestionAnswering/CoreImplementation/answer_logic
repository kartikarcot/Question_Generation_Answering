#!/usr/bin/env python3

import answering
from answering import QA
from qdetect import classifyQuestion
import sys, os

import logging

for name in logging.Logger.manager.loggerDict.keys():
    logging.getLogger(name).setLevel(logging.CRITICAL)

class Example:
	def __init__(self, question, reference):
		self.question = question
		self.reference = reference

class Answer:
	def __init__(self, article_file, questions):
		self.qa = QA()
		

		with open(article_file, 'r', encoding='utf-8') as f:
			self.reference = f.read()

		self.questions = questions
		self.default = ""
		self.invalid = ""
	
	def initializeExample(self, question):
		return Example(question, self.reference)
	
	def process_ans(self,ans):
		l = ans.split(" ")
		result = l[0]
		for i in range(1, len(l)):
			if l[i].startswith("##"):
				result = result+l[i][2:]
			else:
				result = result + " " +l[i]

		return result.capitalize()

	def answer(self):
		final_answers = []

		#Reference: https://danielsz.github.io/blog/2020-12-04T15_08.html
		for question_tuple in self.questions:

			#Invalid question
			if question_tuple[1][0] == "None":
				final_answers.append((question_tuple[0], self.invalid))
			#Direct question
			elif question_tuple[1][0] == "SBARQ":
				question = question_tuple[0]
				ex = self.initializeExample(question)
				ans = self.qa.answer(ex)
				ans = self.process_ans(ans)
				final_answers.append((question, ans))
			
			#YES/NO question
			elif question_tuple[1][0] == "SQ":
				question = question_tuple[0]
				ex = self.initializeExample(question)
				ans = self.qa.answer(ex)
				ans = self.process_ans(ans)
				flag = True
				#reference: https://www.grammarly.com/blog/negatives/
				negative_words = ["no","not","none","nobody", "nothing", "neither", "nowhere", "never"]
				for word in negative_words:
					if word in ans.lower():
						final_answers.append((question, "No"))
						flag = False
						break
				if flag:
					final_answers.append((question, "Yes"))
		return final_answers


	
def question_type(question_file):
	classifyQuestion_obj = classifyQuestion()
	with open(question_file, 'r', encoding='utf-8') as f:
				questions = []
				sentences = f.readlines()
				for sentence in sentences:
					result = classifyQuestion_obj.QuestionType(sentence)
					questions.append((sentence, result))
	return questions


if __name__=='__main__':
	#article_txt = "article2.txt"
	#question_txt = "questions2.txt"
	import sys
	article_txt = sys.argv[1]
	question_txt = sys.argv[2]

	questions = question_type(question_txt)
	#print(questions)

	AnswerObj = Answer(article_txt, questions)

	answers = AnswerObj.answer()
	for answer in answers:
		print(answer[1])






